<?php

/**
 * @file
 * Module file for the ERCore module.
 */

/**
 * Implements hook_date_format_types().
 */
function ercore_date_format_types() {
  return array(
    'ercore_date_format_filter' => t('ERCore: View Filter'),
    'ercore_date_format_day_name' => t('Day Name'),
    'ercore_date_format_month_day_year' => t('Month Day Year'),
    'ercore_date_format_month_year' => t('Month Year'),
    'ercore_date_format_month' => t('Month'),
    'ercore_date_format_year' => t('Year'),
    'ercore_date_format_time' => t('Time'),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function ercore_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['teaser_alternate'] = array(
    'label' => t('Alternate Teaser'),
    'custom settings' => FALSE,
  );
  $entity_info['field_collection_item']['view modes']['simplified'] = array(
    'label' => t('Simplified'),
    'custom settings' => FALSE,
  );
  $entity_info['user']['view modes']['user_institution'] = array(
    'label' => t('User with Institution'),
    'custom settings' => FALSE,
  );
  $entity_info['user']['view modes']['user_institution_link'] = array(
    'label' => t('User with Institution: Linked'),
    'custom settings' => FALSE,
  );
  $entity_info['user']['view modes']['institution'] = array(
    'label' => t('Institution Only'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_preprocess_user_profile().
 */
function ercore_preprocess_user_profile(&$vars) {
  if ($vars['elements']['#view_mode'] == 'user_institution') {
    $vars['theme_hook_suggestions'][] = 'user_profile__user_institution';
  }
  if ($vars['elements']['#view_mode'] == 'user_institution_link') {
    $vars['theme_hook_suggestions'][] = 'user_profile__user_institution_link';
  }
  if ($vars['elements']['#view_mode'] == 'institution') {
    $vars['theme_hook_suggestions'][] = 'user_profile__institution';
  }
}

/**
 * Implements hook_date_formats().
 */
function ercore_date_formats() {
  $formats = array();
  // Short date formats.
  $formats[] = array(
    'type' => 'ercore_date_format_filter',
    'format' => 'Y-m-d',
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'ercore_date_format_day_name',
    'format' => 'l',
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'ercore_date_format_year',
    'format' => 'Y',
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'ercore_date_format_month_day_year',
    'format' => 'F j, Y',
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'ercore_date_format_month_year',
    'format' => 'F Y',
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'ercore_date_format_month',
    'format' => 'm',
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'ercore_date_format_time',
    'format' => 'g:i a',
    'locales' => array(),
  );
  return $formats;
}

/**
 * Implements hook_menu_alter().
 */
function ercore_menu_alter(&$items) {
  $items['node/add'] = array(
    'title' => 'Add content',
    'page callback' => '_ercore_callback_node_add_page',
    'access callback' => '_node_add_access',
  );
  // Change the permission on the "Manage display" tab.
  $items['user/%user/display']['access arguments'] = array('admin_display_suite');
}

/**
 * Menu page callback for add/node page.
 *
 *  Callback for ercore_menu_alter().
 */
function _ercore_callback_node_add_page() {
  $item = menu_get_item();
  $content = system_admin_menu_block($item);
  $type = array();
  $type['ercore_types']['name'] = 'ERCore';
  $type['ercore_types']['content'] = (array_filter($content, '_ercore_node_type_check'));
  $type['jurisdictional_types']['name'] = 'ERCore Jurisdictional';
  $type['jurisdictional_types']['content'] = (array_filter($content, '_ercore_j_node_type_check'));
  $type['old_ercore_types']['name'] = 'Old ERCore Content Types';
  $type['old_ercore_types']['content'] = (array_filter($content, '_ercore_old_node_type_check'));
  $type['admin_types']['name'] = 'ERCore Administrative';
  $type['admin_types']['content'] = (array_filter($content, '_ercore_admin_node_type_check'));
  $type['drupal_types']['name'] = 'Drupal';
  $type['drupal_types']['content'] = (array_filter($content, '_ercore_drupal_node_type_check'));
  $print_type = _ercore_theme_node_add_list($type);
  return $print_type;
}

/**
 * Receives node type array, returns true if type is ERCore.
 *
 * @param array $type_check
 *   Checks if node type are identified as ERCore.
 *
 * @return bool
 *   Returns boolean value of ERCore Status
 */
function _ercore_node_type_check(array $type_check) {
  if (substr($type_check['link_path'], 9, 6) === 'ercore' && substr($type_check['link_path'], 9, 8) !== 'ercore-j' && substr($type_check['link_path'], 9, 9) !== 'ercore-ad') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Receives node type array, returns true if type is ERCore.
 *
 * @param array $type_check
 *   Checks if node type are identified as ERCore Jurisdictional.
 *
 * @return bool
 *   Returns boolean value of ERCore Jurisdictional Status
 */
function _ercore_j_node_type_check(array $type_check) {
  if (substr($type_check['link_path'], 9, 8) === 'ercore-j') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Receives node type array, returns true if type is Old ERCore.
 *
 * @param array $type_check
 *   Checks if node type are identified as Old ERCore related.
 *
 * @return bool
 *   Returns boolean value of Old ERCore Status
 */
function _ercore_old_node_type_check(array $type_check) {
  if (substr($type_check['link_path'], 9, 3) === 'er-') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Receives node type array, returns true if type is ERCore.
 *
 * @param array $type_check
 *   Checks if node type are identified as not ERCore related.
 *
 * @return bool
 *   Returns boolean value of ERCore Status
 */
function _ercore_admin_node_type_check(array $type_check) {
  if (substr($type_check['link_path'], 9, 9) === 'ercore-ad') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Receives node type array, returns true if type is ERCore.
 *
 * @param array $type_check
 *   Checks if node type are identified as not ERCore related.
 *
 * @return bool
 *   Returns boolean value of ERCore Status
 */
function _ercore_drupal_node_type_check(array $type_check) {
  if (substr($type_check['link_path'], 9, 6) !== 'ercore' && substr($type_check['link_path'], 9, 3) !== 'er-') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Themes Drupal add node page with categories.
 *
 * @param array $variables
 *   Variables to use for configuration.
 *
 * @return array
 *   Returns modified page form elements.
 */
function _ercore_theme_node_add_list($variables) {
  $output = '';

  if ($variables != '' || $variables != NULL) {
    foreach ($variables as $type) {
      if ($type['content']) {
        $output .= '<h2>' . $type['name'] . '</h2><ul class="admin-list">';
        foreach ($type['content'] as $item) {
          $output .= '<li class="clearfix">' . l($item['title'], $item['href'], $item['localized_options']);
          $output .= '<div class="description">' . filter_xss_admin($item['description']) . '</div></li>';
        }
        $output .= '</ul>';
      }
    }
  }
  else {
    $output = '<p>' . t(
        'You have not created any content types yet. Go to the
        <a href="create-content">content type creation page</a> to add a
        new content type.', array(
          '@create-content' => url('admin/structure/types/add'),
        )
      ) . '</p>';
  }
  return $output;
}

/**
 * Implements hook_view_api().
 */
function ercore_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ercore_ctools_plugin_api($module, $api) {
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_form_alter().
 */
function ercore_form_alter(&$form, &$form_state, $form_id) {
  $forms = array(
    'ercore_other_product_node_form',
    'ercore_event_node_form',
    'ercore_collaboration_node_form',
    'ercore_patent_node_form',
    'ercore_presentation_node_form',
    'ercore_proposal_node_form',
    'ercore_publication_node_form',
    'ercore_j_highlight_node_form',
    'ercore_j_honor_node_form',
  );
  if (in_array($form_id, $forms) && $form['nid']['#value'] == NULL) {
    $author = $form['author']['name']['#default_value'];
    $author_uid = $form['uid']['#value'];
    $form['field_ercore_organizer']['und'][0]['target_id']['#default_value'] = "$author ($author_uid)";
    $message = 'Your name, "' . $author . '", has been automatically added to ' . $form['field_ercore_organizer']['und']['#title'] . ' field.';
    drupal_set_message($message, 'status');
  }

  // Require Programs field if ercore_programs variable set.
  if (variable_get('ercore_program_required') == 1) {
    $form['field_ercore_programs']['und']['#required'] = 1;
  }
  // Require Programs field if ercore_programs variable set.
  if (variable_get('ercore_component_required') == 1) {
    $form['field_ercore_components']['und']['#required'] = 1;
  }
  if ($form_id == 'ercore_settings_callback') {
    $form['ercore_component_required']['#states'] = array(
      'visible' => array(
        ':input[name="ercore_component_usage"]' => array('checked' => TRUE),
      ),
    );
    $form['ercore_program_required']['#states'] = array(
      'visible' => array(
        ':input[name="ercore_program_usage"]' => array('checked' => TRUE),
      ),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ercore_form_ercore_other_product_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_ercore_op_website']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_op_type[und]"]' => array('value' => '7'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ercore_form_ercore_patent_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_ercore_pt_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pt_licensed[und]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_ercore_pt_licensed[und]"]' => array('checked' => TRUE),
    ),
  );
  $form['field_ercore_pt_licensee']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pt_licensed[und]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_ercore_pt_licensed[und]"]' => array('checked' => TRUE),
    ),
  );

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ercore_form_ercore_proposal_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_ercore_pp_proposal_submit']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pp_proposal_status[und]"]' => array(
        array('value' => 'Submitted'),
        array('value' => 'Pending'),
        array('value' => 'Awarded'),
        array('value' => 'Expired'),
        array('value' => 'Denied'),
      ),
    ),
  );
  $form['field_ercore_pp_proposal_pending']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pp_proposal_status[und]"]' => array('value' => 'Pending'),
    ),
    'required' => array(
      ':input[name="field_ercore_pp_proposal_status[und]"]' => array('value' => 'Pending'),
    ),
  );
  $form['field_ercore_pp_proposal_denied']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pp_proposal_status[und]"]' => array('value' => 'Denied'),
    ),
    'required' => array(
      ':input[name="field_ercore_pp_proposal_status[und]"]' => array('value' => 'Denied'),
    ),
  );
  $form['field_ercore_pp_proposal_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pp_proposal_status[und]"]' => array(
        array('value' => 'Awarded'),
        array('value' => 'Expired'),
      ),
    ),
    'required' => array(
      ':input[name="field_ercore_pp_proposal_status[und]"]' => array(
        array('value' => 'Awarded'),
        array('value' => 'Expired'),
      ),
    ),
  );
  $form['field_ercore_pp_award_amount']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pp_proposal_status[und]"]' => array('value' => 'Awarded'),
    ),
    'required' => array(
      ':input[name="field_ercore_pp_proposal_status[und]"]' => array('value' => 'Awarded'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ercore_form_ercore_publication_node_form_alter(&$form, &$form_state, $form_id) {
  // Publication Status Fields.
  // Submitted Date field #states.
  $form['field_ercore_pb_submit_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_status[und]"]' => array(
        array('value' => '0'),
        array('value' => '1'),
        array('value' => '2'),
      ),
    ),
  );
  // Published Date field #states.
  $form['field_ercore_pb_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_status[und]"]' => array('value' => '0'),
    ),
    'required' => array(
      ':input[name="field_ercore_pb_status[und]"]' => array('value' => '0'),
    ),
  );
  // NSF field #states.
  $form['field_ercore_nsf']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_status[und]"]' => array('value' => '0'),
    ),
    'required' => array(
      ':input[name="field_ercore_pb_status[und]"]' => array('value' => '0'),
    ),
  );
  // Body field #states.
  $form['body']['#weight'] = '9';
  $form['body']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_status[und]"]' => array('value' => '0'),
    ),
    'required' => array(
      ':input[name="field_ercore_pb_status[und]"]' => array('value' => '0'),
    ),
  );
  // Publication Type Fields.
  // Journal Name field #states.
  $form['field_ercore_pb_journal_name']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_type[und]"]' => array(
        array('value' => 'Journal Article'),
        array('value' => 'Book'),
        array('value' => 'Conference Proceedings'),
        array('value' => 'Magazine Article'),
        array('value' => 'Technical Report'),
        array('value' => 'Newspaper Article'),
      ),
    ),
    'required' => array(
      ':input[name="field_ercore_pb_type[und]"]' => array(
        array('value' => 'Journal Article'),
        array('value' => 'Book'),
        array('value' => 'Conference Proceedings'),
        array('value' => 'Magazine Article'),
        array('value' => 'Newspaper Article'),
      ),
    ),
  );
  // Volume field #states.
  $form['field_ercore_pb_journal_volume']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_type[und]"]' => array(
        array('value' => 'Journal Article'),
        array('value' => 'Book'),
        array('value' => 'Conference Proceedings'),
        array('value' => 'Magazine Article'),
        array('value' => 'Technical Report'),
        array('value' => 'Newspaper Article'),
      ),
    ),
  );
  // Publisher field #states.
  $form['field_ercore_pb_publisher']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_type[und]"]' => array(
        array('value' => 'Journal Article'),
        array('value' => 'Book'),
        array('value' => 'Conference Proceedings'),
        array('value' => 'Magazine Article'),
        array('value' => 'Technical Report'),
        array('value' => 'Newspaper Article'),
      ),
    ),
  );
  // Title of Series field #states.
  $form['field_ercore_pb_coll_title']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_type[und]"]' => array(
        array('value' => 'Journal Article'),
        array('value' => 'Book'),
        array('value' => 'Conference Proceedings'),
        array('value' => 'Magazine Article'),
        array('value' => 'Technical Report'),
        array('value' => 'Newspaper Article'),
      ),
    ),
  );
  // Pages field #states.
  $form['field_ercore_pb_journal_pages']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_type[und]"]' => array(
        array('value' => 'Journal Article'),
        array('value' => 'Book'),
        array('value' => 'Conference Proceedings'),
        array('value' => 'Magazine Article'),
        array('value' => 'Technical Report'),
        array('value' => 'Newspaper Article'),
      ),
    ),
  );
  // DOI field #states.
  $form['field_ercore_pb_doi']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_type[und]"]' => array(
        array('value' => 'Journal Article'),
        array('value' => 'Book'),
        array('value' => 'Conference Proceedings'),
        array('value' => 'Magazine Article'),
        array('value' => 'Technical Report'),
        array('value' => 'Newspaper Article'),
      ),
    ),
  );
  // ISSN/ISBN field #states.
  $form['field_ercore_pb_issn']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_type[und]"]' => array(
        array('value' => 'Journal Article'),
        array('value' => 'Book'),
        array('value' => 'Conference Proceedings'),
        array('value' => 'Magazine Article'),
        array('value' => 'Technical Report'),
        array('value' => 'Newspaper Article'),
      ),
    ),
  );
  // ARK field #states.
  $form['field_ercore_pb_ark']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_type[und]"]' => array(
        array('value' => 'Journal Article'),
        array('value' => 'Book'),
        array('value' => 'Conference Proceedings'),
        array('value' => 'Magazine Article'),
        array('value' => 'Technical Report'),
        array('value' => 'Newspaper Article'),
      ),
    ),
  );
  // Data field #states.
  $form['field_ercore_pb_archived']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_data[und]"]' => array('value' => '1'),
    ),
  );
  $form['field_ercore_pb_arch_name']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_pb_archived[und]"]' => array('value' => '2'),
    ),
    'required' => array(
      ':input[name="field_ercore_pb_archived[und]"]' => array('value' => '2'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ercore_form_ercore_presentation_node_form_alter(&$form, &$form_state, $form_id) {
  // Presentation Status Fields.
  $form['field_ercore_nsf']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_ps_status[und]"]' => array('value' => '0'),
    ),
    'required' => array(
      ':input[name="field_ercore_ps_status[und]"]' => array('value' => '0'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ercore_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  $roles = array_reverse($user->roles, FALSE);
  $highest_role = $roles[0];
  $admin_roles = array(
    'administrator',
    'administrative staff',
    'ercore admin',
  );
  if (!in_array($highest_role, $admin_roles)) {
    $form['field_ercore_us_sen_role']['#disabled'] = TRUE;
  }

  // Remove n/a option from 160 hours.
  unset($form['field_ercore_us_160hours']['und']['#options']['_none']);
  // User field 160 hours #states.
  $form['field_ercore_us_160hours']['#states'] = array(
    'required' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('filled' => TRUE),
    ),
  );
  // Remove n/a option from field_ercore_us_paid.
  unset($form['field_ercore_us_paid']['und']['#options']['_none']);
  // User field_ercore_us_paid #states.
  $form['field_ercore_us_paid']['#states'] = array(
    'required' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('filled' => TRUE),
    ),
  );
  // User field Supervisor #states.
  $form['field_ercore_us_supervisor']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '4'),
    ),
  );
  // User field Advisor #states.
  $form['field_ercore_us_advisor']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '3'),
    ),
  );
  // Remove n/a option from field_ercore_us_fac_support.
  unset($form['field_ercore_us_fac_support']['und']['#options']['_none']);
  // User field Faculty Support #states.
  $form['field_ercore_us_fac_support']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '0'),
    ),
    'required' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '0'),
    ),
  );
  // User field Anticipated Undergraduate Date #states.
  $form['field_ercore_us_under_ant']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '5'),
    ),
    'required' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '5'),
    ),
  );
  // User field Actual Undergraduate Date #states.
  $form['field_ercore_us_under_act']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '5'),
    ),
  );
  // User field Anticipated Masters Date #states.
  $form['field_ercore_us_masters_ant']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '4'),
    ),
  );
  // User field Actual Masters Date #states.
  $form['field_ercore_us_masters_act']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '4'),
    ),
  );
  // User field Anticipated Doctoral Date #states.
  $form['field_ercore_us_doctor_ant']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '4'),
    ),
  );
  // User field Actual Doctoral Date #states.
  $form['field_ercore_us_doctor_act']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array('value' => '4'),
    ),
  );
  // User RCR Training #states.
  $form['field_ercore_us_rcr_bool']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array(
        array('value' => '5'),
        array('value' => '4'),
      ),
    ),
  );
  // User Boards & Committee field #states.
  $form['field_ercore_us_committees']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array(
        array('value' => '0'),
        array('value' => '2'),
      ),
    ),
  );
  unset($form['field_ercore_us_leadership_team']['und']['#options']['_none']);
  // User Management Team field #states.
  $form['field_ercore_us_leadership_team']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array(
        array('value' => '0'),
        array('value' => '2'),
      ),
    ),
    'required' => array(
      ':input[name="field_ercore_us_sen_role[und]"]' => array(
        array('value' => '0'),
        array('value' => '2'),
      ),
    ),
  );
  // User RCR in Person Date #states.
  $form['field_ercore_us_rcr_in_person']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
    ),
  );
  // User RCR in Person Upload #states.
  $form['field_ercore_us_rcr_inperson_ul']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
    ),
  );
  // User RCR online Date #states.
  $form['field_ercore_us_rcr_online']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
    ),
  );
  $form['field_ercore_us_rcr_online_up']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
    ),
  );
  // User RCR Additional Doc #states.
  $form['field_ercore_us_additional_doc']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
    ),
  );
  // User Mentoring Signoff #states.
  $form['field_ercore_us_ment_signoff']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('value' => '3'),
    ),
    'required' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('value' => '3'),
    ),
  );
  // User Mentoring Plan Upload  #states.
  $form['field_ercore_us_mnt_up']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('value' => '3'),
    ),
    'required' => array(
      ':input[name="field_ercore_us_rcr_bool[und]"]' => array('value' => '3'),
    ),
  );
  // User Data Description #states.
  $form['field_ercore_us_data_type']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_collect_data[und]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_ercore_us_collect_data[und]"]' => array('checked' => TRUE),
    ),
  );
  // User Data ongoing #states.
  $form['field_ercore_us_data_frequency']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_collect_data[und]"]' => array('checked' => TRUE),
    ),
  );
  // User Data Submission Date #states.
  $form['field_ercore_us_data_submit_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_collect_data[und]"]' => array('checked' => TRUE),
    ),
  );
  // User Data Manager #states.
  $form['field_ercore_us_has_this_user']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_collect_data[und]"]' => array('checked' => TRUE),
    ),
  );
  // User Data URL #states.
  $form['field_ercore_us_data_url']['#states'] = array(
    'visible' => array(
      ':input[name="field_ercore_us_collect_data[und]"]' => array('checked' => TRUE),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ercore_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['#fieldgroups'] = NULL;
  $form['field_user_name']['#weight'] = -11;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ercore_form_field_collection_item_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#entity']->field_name = 'field_ercore_ev_engagement') {
    $form['#validate'][] = 'ercore_minority_count';

  }
}

/**
 * Custom field validation for minority counts.
 */
function ercore_minority_count(&$form, &$form_state) {
  if ($form_state['input']['field_ercore_ee_ari_stu_mn']['und'][0]['value'] != 0) {
    $ari_stu_mn = $form_state['input']['field_ercore_ee_ari_stu_mn']['und'][0]['value'];
    $ari_stu_m = $form_state['input']['field_ercore_ee_ari_stu_m']['und'][0]['value'];
    $ari_stu_f = $form_state['input']['field_ercore_ee_ari_stu_f']['und'][0]['value'];
    $ari_stu_u = $form_state['input']['field_ercore_ee_ari_stu_u']['und'][0]['value'];
    if (ercore_minority_count_compare($ari_stu_m, $ari_stu_f, $ari_stu_u, $ari_stu_mn) == FALSE) {
      form_set_error('field_ercore_ee_ari_stu_mn', t('Academic Research Institutions (ARI): The ARI: Students - Under-represented Minority value cannot be more than ARI: Students - Male, ARI: Students - Female, and ARI: Students - Undeclared values combined.'));
    }
  }
  if ($form_state['input']['field_ercore_ee_ari_fac_mn']['und'][0]['value'] != 0) {
    $ari_fac_mn = $form_state['input']['field_ercore_ee_ari_fac_mn']['und'][0]['value'];
    $ari_fac_m = $form_state['input']['field_ercore_ee_ari_fac_m']['und'][0]['value'];
    $ari_fac_f = $form_state['input']['field_ercore_ee_ari_fac_f']['und'][0]['value'];
    $ari_fac_u = $form_state['input']['field_ercore_ee_ari_fac_u']['und'][0]['value'];
    if (ercore_minority_count_compare($ari_fac_m, $ari_fac_f, $ari_fac_u, $ari_fac_mn) == FALSE) {
      form_set_error('field_ercore_ee_ari_fac_mn', t('Academic Research Institutions (ARI): The ARI: Faculty - Under-represented Minority value cannot be more than ARI: Faculty - Male, ARI: Faculty - Female, and ARI: Faculty - Undeclared values combined.'));
    }
  }
  if ($form_state['input']['field_ercore_ee_pui_stu_mn']['und'][0]['value'] != 0) {
    $pui_stu_mn = $form_state['input']['field_ercore_ee_pui_stu_mn']['und'][0]['value'];
    $pui_stu_m = $form_state['input']['field_ercore_ee_pui_stu_m']['und'][0]['value'];
    $pui_stu_f = $form_state['input']['field_ercore_ee_pui_stu_f']['und'][0]['value'];
    $pui_stu_u = $form_state['input']['field_ercore_ee_pui_stu_u']['und'][0]['value'];
    if (ercore_minority_count_compare($pui_stu_m, $pui_stu_f, $pui_stu_u, $pui_stu_mn) == FALSE) {
      form_set_error('field_ercore_ee_pui_stu_mn', t('Primary Undergraduate Institutions (UI): The UI: Students - Under-represented Minority value cannot be more than UI: Students - Male, UI: Students - Female, and UI: Students - Undeclared values combined.'));
    }
  }
  if ($form_state['input']['field_ercore_ee_pui_fac_mn']['und'][0]['value'] != 0) {
    $pui_fac_mn = $form_state['input']['field_ercore_ee_pui_fac_mn']['und'][0]['value'];
    $pui_fac_m = $form_state['input']['field_ercore_ee_pui_fac_m']['und'][0]['value'];
    $pui_fac_f = $form_state['input']['field_ercore_ee_pui_fac_f']['und'][0]['value'];
    $pui_fac_u = $form_state['input']['field_ercore_ee_pui_fac_u']['und'][0]['value'];
    if (ercore_minority_count_compare($pui_fac_m, $pui_fac_f, $pui_fac_u, $pui_fac_mn) == FALSE) {
      form_set_error('field_ercore_ee_pui_fac_mn', t('Primary Undergraduate Institutions (UI): The UI: Faculty - Under-represented Minority value cannot be more than UI: Faculty - Male, UI: Faculty - Female, and UI: Faculty - Undeclared values combined.'));
    }
  }
  if ($form_state['input']['field_ercore_ee_msi_stu_mn']['und'][0]['value'] != 0) {
    $msi_stu_mn = $form_state['input']['field_ercore_ee_msi_stu_mn']['und'][0]['value'];
    $msi_stu_m = $form_state['input']['field_ercore_ee_msi_stu_m']['und'][0]['value'];
    $msi_stu_f = $form_state['input']['field_ercore_ee_msi_stu_f']['und'][0]['value'];
    $msi_stu_u = $form_state['input']['field_ercore_ee_msi_stu_u']['und'][0]['value'];
    if (ercore_minority_count_compare($msi_stu_m, $msi_stu_f, $msi_stu_u, $msi_stu_mn) == FALSE) {
      form_set_error('field_ercore_ee_msi_stu_mn', t('Minority Serving Institutions (MSI): The MSI: Students - Under-represented Minority value cannot be more than MSI: Students - Male, MSI: Students - Female, and MSI: Students - Undeclared values combined.'));
    }
  }
  if ($form_state['input']['field_ercore_ee_msi_fac_mn']['und'][0]['value'] != 0) {
    $msi_fac_mn = $form_state['input']['field_ercore_ee_msi_fac_mn']['und'][0]['value'];
    $msi_fac_m = $form_state['input']['field_ercore_ee_msi_fac_m']['und'][0]['value'];
    $msi_fac_f = $form_state['input']['field_ercore_ee_msi_fac_f']['und'][0]['value'];
    $msi_fac_u = $form_state['input']['field_ercore_ee_msi_fac_u']['und'][0]['value'];
    if (ercore_minority_count_compare($msi_fac_m, $msi_fac_f, $msi_fac_u, $msi_fac_mn) == FALSE) {
      form_set_error('field_ercore_ee_msi_fac_mn', t('Minority Serving Institutions (MSI): The MSI: Faculty - Under-represented Minority value cannot be more than MSI: Faculty - Male, MSI: Faculty - Female, and MSI: Faculty - Undeclared values combined.'));
    }
  }
  if ($form_state['input']['field_ercore_ee_k12i_stud_mn']['und'][0]['value'] != 0) {
    $k12i_stud_mn = $form_state['input']['field_ercore_ee_k12i_stud_mn']['und'][0]['value'];
    $k12i_stud_m = $form_state['input']['field_ercore_ee_k12i_stud_m']['und'][0]['value'];
    $k12i_stud_f = $form_state['input']['field_ercore_ee_k12i_stud_f']['und'][0]['value'];
    $k12i_stud_u = $form_state['input']['field_ercore_ee_k12i_stud_u']['und'][0]['value'];
    if (ercore_minority_count_compare($k12i_stud_m, $k12i_stud_f, $k12i_stud_u, $k12i_stud_mn) == FALSE) {
      form_set_error('field_ercore_ee_k12i_stud_mn', t('K-12 Institutions (K-12): The K-12: Students Reached Directly (RD) - Under-represented Minority value cannot be more than K-12 (RD): Students - Male, K-12 (RD): Students - Female, and K-12 (RD): Students - Undeclared values combined.'));
    }
  }
  if ($form_state['input']['field_ercore_ee_k12i_stut_mn']['und'][0]['value'] != 0) {
    $k12i_stut_mn = $form_state['input']['field_ercore_ee_k12i_stut_mn']['und'][0]['value'];
    $k12i_stut_m = $form_state['input']['field_ercore_ee_k12i_stut_m']['und'][0]['value'];
    $k12i_stut_f = $form_state['input']['field_ercore_ee_k12i_stut_f']['und'][0]['value'];
    $k12i_stut_u = $form_state['input']['field_ercore_ee_k12i_stut_u']['und'][0]['value'];
    if (ercore_minority_count_compare($k12i_stut_m, $k12i_stut_f, $k12i_stut_u, $k12i_stut_mn) == FALSE) {
      form_set_error('field_ercore_ee_k12i_stut_mn', t('K-12 Institutions (K-12): The K-12: Students Reached via Teach. (RT) - Under-represented Minority value cannot be more than K-12 (RT): Students - Male, K-12 (RT): Students - Female, and K-12 (RT): Students - Undeclared values combined.'));
    }
  }
  if ($form_state['input']['field_ercore_ee_k12i_tec_mn']['und'][0]['value'] != 0) {
    $k12i_tec_mn = $form_state['input']['field_ercore_ee_k12i_tec_mn']['und'][0]['value'];
    $k12i_tec_m = $form_state['input']['field_ercore_ee_k12i_tec_m']['und'][0]['value'];
    $k12i_tec_f = $form_state['input']['field_ercore_ee_k12i_tec_f']['und'][0]['value'];
    $k12i_tec_u = $form_state['input']['field_ercore_ee_k12i_tec_u']['und'][0]['value'];
    if (ercore_minority_count_compare($k12i_tec_m, $k12i_tec_f, $k12i_tec_u, $k12i_tec_mn) == FALSE) {
      form_set_error('field_ercore_ee_k12i_tec_mn', t('K-12 Institutions (K-12): The K-12: Teachers - Under-represented Minority value cannot be more than K-12: Teachers - Male, K-12: Teachers - Female, and K-12: Teachers - Undeclared values combined.'));
    }
  }
  if ($form_state['input']['field_ercore_ee_oth_mn']['und'][0]['value'] != 0) {
    $oth_mn = $form_state['input']['field_ercore_ee_oth_mn']['und'][0]['value'];
    $oth_m = $form_state['input']['field_ercore_ee_oth_m']['und'][0]['value'];
    $oth_f = $form_state['input']['field_ercore_ee_oth_f']['und'][0]['value'];
    $oth_u = $form_state['input']['field_ercore_ee_oth_u']['und'][0]['value'];
    if (ercore_minority_count_compare($oth_m, $oth_f, $oth_u, $oth_mn) == FALSE) {
      form_set_error('field_ercore_ee_oth_mn', t('Other: Under-represented Minority value cannot be more than Other: Male, Other: Female, and Other: Undeclared values combined.'));
    }
  }
}

/**
 * Custom validation function for engagement field validation.
 *
 * @param int $male
 *   Male attendee integer value.
 * @param int $female
 *   Female attendee integer value.
 * @param int $undeclared
 *   Undeclared attendee integer value.
 * @param int $minority
 *   Under-represented Minority attendee integer value.
 *
 * @return bool
 *   Return boolean of comparison.
 */
function ercore_minority_count_compare(&$male, &$female, &$undeclared, &$minority) {
  $attendees = $male + $female + $undeclared;
  if ($minority <= $attendees) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_permission().
 */
function ercore_permission() {
  return array(
    'administer ercore module' => array(
      'title' => t('Administer ERCore Module'),
      'description' => t('Administer ERCore Configuration and Settings.'),
    ),
    'access ercore admin content' => array(
      'title' => t('Access ERCore Administrative Content'),
      'description' => NULL,
    ),
    'access ercore content' => array(
      'title' => t('Access ERCore Content'),
      'description' => NULL,
    ),
    'access ercore excel sheets' => array(
      'title' => t('Access ERCore Excel sheets'),
      'description' => t('Download ERCore Data Exports'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function ercore_help($path, $arg) {
  global $base_url;
  switch ($path) {
    case 'admin/help#ercore':
      if (module_exists('ercore_admin')) {

        return t('ERCore administration pages include <a href="@user-guide">
User Guides</a> and an <a href="@admin-guide">Administrative Guide</a>.',
          array(
            '@user-guide' => $base_url . '/ercore/guides',
            '@admin-guide' => $base_url . '/ercore/admin-guide',
          ));
      }
      else {
        return t('Install ERCore Admin module for User and Administrative Guide
      pages.');
      }
  }
}

/**
 * Implements hook_field_access().
 */
function ercore_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op != 'edit' && $entity_type == 'node') {
    if (isset($entity->field_ercore_ev_date['und'][0]['value'])) {
      $engagement = $entity->field_ercore_ev_reminders['und'][0]['value'];
      $event_date = $entity->field_ercore_ev_date['und'][0]['value'];
      $now = date("Y-m-d\TH:i:s");

      if ($field['field_name'] == 'field_ercore_ev_engagement') {
        if ($now >= $event_date && $engagement == 1) {
          return TRUE;
        }
        else {
          return FALSE;
        }
      }
    }
  }
  // Hide some user fields dependent on context.
  if ($entity_type == 'user' && $op == 'view') {
    if ($field['field_name'] == 'field_ercore_us_data_frequency') {
      if ($entity->field_ercore_us_collect_data['und'][0]['value'] == 1) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    }
  }
  if ($entity_type == 'user' || $entity_type == 'node') {
    // Component field usage based on admin configuration.
    if ($field['field_name'] == 'field_ercore_components') {
      if (variable_get('ercore_component_usage') == 1) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    }
    // Project field usage based on admin configuration.
    if ($field['field_name'] == 'field_ercore_programs') {
      if (variable_get('ercore_program_usage') == 1) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    }
  }
}

/**
 * Implements hook_libraries_info().
 */
function ercore_libraries_info() {
  $libraries['phpexcel'] = array(
    'name' => 'PHPExcel',
    "vendor url" => "http://phpexcel.codeplex.com/",
    "download url" => "http://phpexcel.codeplex.com/downloads/get/688493",
    "version arguments" => array(
      'file' => 'changelog.txt',
      'pattern' => "/@version\s+([0-9\.]+)/",
      'lines' => 25,
    ),
    'path' => 'Classes',
    'files' => array(
      'php' => array(
        'PHPExcel.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function ercore_menu() {
  $items['admin/config/ercore'] = array(
    'title' => 'ERCore',
    'description' => 'ERCore Administrative settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer ercore module'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/ercore/admin'] = array(
    'title' => 'ERCore Reporting Module Settings',
    'description' => 'Settings which affect the functionality of the ERCore Reporting module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ercore_settings_callback'),
    'access arguments' => array('administer ercore module'),
    'file' => 'pages/ercore-admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Presave Field Collection Item to allow for computed field computation.
 *
 * @param FieldCollectionItemEntity $field_collection_item
 *   The field collection item that is being inserted.
 */
function ercore_field_collection_item_presave(FieldCollectionItemEntity $field_collection_item) {
  if ($field_collection_item->field_name == 'field_ercore_ev_engagement') {
    $file_new = FALSE;
    if (isset($field_collection_item->field_ercore_ee_ee_file['und'])) {
      if (count($field_collection_item->field_ercore_ee_ee_file['und'])) {
        $has_old = isset($field_collection_item->original->field_ercore_ee_ee_file['und']) && count($field_collection_item->original->field_ercore_ee_ee_file['und']);
        if (!$has_old || ($has_old && $field_collection_item->original->field_ercore_ee_ee_file['und'][0]['fid'] != $field_collection_item->field_ercore_ee_ee_file['und'][0]['fid'])) {
          $file_new = TRUE;
        }
      }
    }
    if ($file_new == TRUE) {
      _ercore_parse_ee_file($field_collection_item, 'presave');
    }
  }
}

/**
 * Uses PHPExcel to parse .xls file.
 *
 * @param object $field_collection_item
 *   Field Collection item object to access files and fields.
 *
 * @throws error
 *    PHPExcel_Reader_Exception.
 */
function _ercore_parse_ee_file(&$field_collection_item) {
  if (($library = libraries_detect('PHPExcel')) && !empty($library['installed']) && libraries_load_files($library)) {
    // The library is installed, and files are loaded.
    $file = file_load($field_collection_item->field_ercore_ee_ee_file['und'][0]['fid']);
    $path = $file->uri;
    $obj_reader = PHPExcel_IOFactory::createReader('Excel5');
    $obj_php_excel = $obj_reader->load($path);
    $worksheet = $obj_php_excel->getActiveSheet();

    // Makes sure that it's the expected excel sheet.
    if ($worksheet->getCellByColumnAndRow(2, 1)
      ->getValue() != "External Engagement Reporting Sheet"
    ) {
      return;
    }
    $instcodes = array('1' => 'ari', '2' => 'pui', '3' => 'msi', '4' => 'k12i');
    $personcodes1 = array(
      '1' => 'tec',
      '2' => 'stud',
      '3' => 'tec',
    );
    $personcodes2 = array(
      '1' => 'fac',
      '2' => 'stu',
      '3' => 'fac',
    );
    $gendercodes = array('m' => 'm', 'f' => 'f', '' => 'u');
    $minoritycodes = array('y' => 'mn');

    // Clear out all of the values in preparation for new values.
    foreach (array(
      'ari_fac',
      'ari_stu',
      'pui_fac',
      'pui_stu',
      'msi_fac',
      'msi_stu',
      'k12i_tec',
      'k12i_stud',
      'k12i_stut',
      'oth',
    ) as $prefix) {
      foreach (array("t", "m", "f", "u", "mn") as $attr) {
        $field_collection_item->{"field_ercore_ee_{$prefix}_{$attr}"}['und'][0]['value'] = 0;
      }
    }

    $highestrow = $worksheet->getHighestRow();
    // Last filled out row of the template...
    for ($y = 14; $y <= $highestrow; $y++) {
      // 14 is the start of the data row; get() function is defined below.
      $name = $worksheet->getCellByColumnAndRow(1, $y)->getValue();
      $inst_code = $worksheet->getCellByColumnAndRow(2, $y)->getValue();
      $inst = _ercore_get($instcodes, $inst_code);
      $personcodes = $inst == 'k12i' ? $personcodes1 : $personcodes2;
      $person_code = $worksheet->getCellByColumnAndRow(3, $y)->getValue();
      $person = _ercore_get($personcodes, $person_code);
      $gender = _ercore_get($gendercodes, strtolower($worksheet->getCellByColumnAndRow(4, $y)
        ->getValue()));
      $minority = _ercore_get($minoritycodes, strtolower($worksheet->getCellByColumnAndRow(5, $y)
        ->getValue()));
      $paid = strtolower($worksheet->getCellByColumnAndRow(6, $y)
        ->getValue());
      // Has no bearing on this form.
      if (!$name && !$inst_code && !$person_code && !$minority) {
        // If the information dries up, just assume this is the end of the list.
        break;
      }

      // We can't count paid participants...
      if (substr($paid, 0, 1) != 'y') {
        // Someone might put in "yes" and not just "y"...
        if (!$person || !$inst) {
          $col = "oth";
        }
        else {
          $col = $inst . '_' . $person;
        }

        if ($gender) {
          $field_collection_item->{"field_ercore_ee_{$col}_{$gender}"}['und'][0]['value']++;
        }
        else {
          $field_collection_item->{"field_ercore_ee_{$col}_u"}['und'][0]['value']++;
        }
        if ($minority) {
          $field_collection_item->{"field_ercore_ee_{$col}_mn"}['und'][0]['value']++;
        }
      }
    }
    $vars = $file->filename;

    watchdog('ercore', $vars, WATCHDOG_INFO);
    drupal_set_message(t('The attachment was processed and the External
    Engagements have been filled out. Please verify that the counts are
    correct.'));
  }
  else {
    // Libraries had a problem loading PHPExcel.
    // Contains a short status code of what went wrong, such as 'not found'.
    $error_message = "User tried to use External Engagement Excel Upload, error: " . $library['error'];
    // This contains a detailed (localized) error message.
    drupal_set_message('PHPExcel library error: ' . $error_message, 'error');
    watchdog('ercore', $error_message, NULL, WATCHDOG_CRITICAL);
  }
}

/**
 * Helper function, find a value inside of an object or returns a default value.
 *
 * @param object $obj
 *   Data object to be used in validation.
 * @param array $value
 *   Vvalue to be compared with $object.
 * @param bool $default
 *   Sets default value to be returned.
 *
 * @return bool
 *   Returns default value to be used.
 */
function _ercore_get($obj, array $value, $default = FALSE) {
  switch (gettype($obj)) {
    case 'array':
      return isset($obj[$value]) ? $obj[$value] : $default;

    case 'object':
      return isset($obj->{$value}) ? $obj->{$value} : $default;

    default:
      return $default;
  }
}

/**
 * Set ERCore fieldgroup visibility.
 */
function ercore_field_group_build_pre_render_alter(&$element) {
  if (isset($element['group_ercore_us_f_profile']['group_ercore_us_f_epscor']['group_ercore_us_f_ed'])) {

    $element['group_ercore_us_f_profile']['group_ercore_us_f_epscor']['group_ercore_us_f_ed'] += array(
      '#states' => array(
        'visible' => array(
          ':input[name="field_ercore_us_sen_role[und]"]' => array(
            array('value' => '5'),
            array('value' => '4'),
            array('value' => '3'),
          ),
        ),
      ),
      '#id' => 'group_ercore_us_f_ed',

    );

  }
  if (isset($element['group_ercore_us_f_profile']['group_ercore_us_f_epscor']['group_ercore_us_f_certs'])) {

    $element['group_ercore_us_f_profile']['group_ercore_us_f_epscor']['group_ercore_us_f_certs'] += array(
      '#states' => array(
        'visible' => array(
          ':input[name="field_ercore_us_rcr_bool[und]"]' => array('checked' => TRUE),
        ),
      ),
      '#id' => 'group_ercore_us_f_certs',

    );
  }
  if (isset($element['group_ercore_pb_info'])) {

    $element['group_ercore_pb_info'] += array(
      '#states' => array(
        'visible' => array(
          ':input[name="field_ercore_pb_type[und]"]' => array(
            array('value' => 'Journal Article'),
            array('value' => 'Book'),
            array('value' => 'Conference Proceedings'),
            array('value' => 'Magazine Article'),
            array('value' => 'Technical Report'),
            array('value' => 'Newspaper Article'),
          ),
        ),
      ),
      '#id' => 'group_ercore_pb_info',
    );
  }
}

/**
 * Implements hook_block_info().
 */
function ercore_block_info() {
  $blocks = array();
  $blocks['ercore_grant_block'] = array(
    'info' => t('ERCore Grant Block'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ercore_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ercore_grant_block':
      $block['subject'] = '';
      $block['content'] = _ercore_grant_block();
      break;
  }
  return $block;
}

/**
 * Generates block array for NSF Block.
 */
function _ercore_grant_block() {
  $grant_number = variable_get('ercore_grant_number');
  $grant = '<span class="grant-number"> ' . t('This material is based upon work supported by the National Science Foundation under Grant Number') . '<em> ' . $grant_number . '</em>.</span><br />';

  $opinion = t('Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.');
  $output = $grant . $opinion;
  return $output;
}

/**
 * Implements hook_theme_registry_alter().
 */
function ercore_theme_registry_alter(&$theme_registry) {
  // Get the path to this module.
  $modulepath = drupal_get_path('module', 'ercore');

  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $modulepath);

  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {

    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $modulepath;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function ercore_preprocess_field(&$vars) {
  if ($vars['element']['#field_type'] == 'text_long') {
    $field_name = $vars['element']['#field_name'];
    foreach ($vars['items'] as $key => &$item) {
      if ($vars['element']['#object']->{$field_name}[LANGUAGE_NONE][$key]['format'] == NULL) {
        $item['#markup'] = nl2br($item['#markup']);
      }
    }
  }
}
